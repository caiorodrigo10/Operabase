import { createClient } from '@supabase/supabase-js';
import fetch from 'node-fetch';

// Configura√ß√£o baseada no que encontrei no c√≥digo
const SUPABASE_URL = process.env.SUPABASE_URL || 'https://lkwrevhxugaxfpwiktdy.supabase.co';
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxrd3Jldmh4dWdheGZwd2lrdGR5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk4Mjg0NjMsImV4cCI6MjA2NTQwNDQ2M30.sWOsGKa_PWfjth6iaXcTpyGa95xmGZO_vnBnrFnK-sc';

// URLs para testar
const BACKEND_URLS = [
  'http://localhost:3000',
  'http://localhost:5000',
  'http://operabase-backend-mvp-env-1.sa-east-1.elasticbeanstalk.com',
  'https://operabase-backend-mvp-env-1.sa-east-1.elasticbeanstalk.com'
];

const FRONTEND_URLS = [
  'https://operabase-frontend.vercel.app',
  'https://operabase-main.vercel.app'
];

async function diagnosticoCompleto() {
  console.log('üîç DIAGN√ìSTICO COMPLETO - API DE CALEND√ÅRIO');
  console.log('===========================================\n');

  // 1. Testar conex√£o com Supabase
  console.log('üìä ETAPA 1: Testando conex√£o com Supabase...');
  await testarSupabase();

  // 2. Testar backends dispon√≠veis
  console.log('\nüîß ETAPA 2: Testando backends dispon√≠veis...');
  const backendDisponivel = await testarBackends();

  // 3. Testar autentica√ß√£o
  console.log('\nüîê ETAPA 3: Testando autentica√ß√£o...');
  const token = await testarAutenticacao(backendDisponivel);

  // 4. Testar rotas de calend√°rio
  console.log('\nüìÖ ETAPA 4: Testando rotas de calend√°rio...');
  await testarRotasCalendario(backendDisponivel, token);

  // 5. Testar dados do banco
  console.log('\nüóÑÔ∏è ETAPA 5: Verificando dados no banco...');
  await verificarDadosBanco();

  // 6. Testar configura√ß√£o frontend
  console.log('\nüåê ETAPA 6: Testando configura√ß√£o frontend...');
  await testarConfigFrontend();

  console.log('\n‚úÖ DIAGN√ìSTICO CONCLU√çDO');
}

async function testarSupabase() {
  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    
    // Testar conex√£o b√°sica
    const { data, error } = await supabase.from('users').select('count').limit(1);
    
    if (error) {
      console.log('‚ùå Erro na conex√£o Supabase:', error.message);
      return false;
    }
    
    console.log('‚úÖ Conex√£o Supabase OK');
    
    // Testar tabelas importantes
    const tabelas = ['users', 'appointments', 'contacts', 'clinics', 'calendar_integrations'];
    
    for (const tabela of tabelas) {
      try {
        const { data, error } = await supabase.from(tabela).select('count').limit(1);
        if (error) {
          console.log(`‚ùå Tabela ${tabela}: ${error.message}`);
        } else {
          console.log(`‚úÖ Tabela ${tabela}: OK`);
        }
      } catch (e) {
        console.log(`‚ùå Tabela ${tabela}: Erro de conex√£o`);
      }
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå Erro geral Supabase:', error.message);
    return false;
  }
}

async function testarBackends() {
  console.log('Testando URLs de backend...');
  
  for (const url of BACKEND_URLS) {
    try {
      console.log(`üîç Testando: ${url}`);
      
      const response = await fetch(`${url}/health`, {
        method: 'GET',
        timeout: 5000
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ Backend dispon√≠vel: ${url}`);
        console.log(`   Status: ${data.status}, Timestamp: ${data.timestamp}`);
        return url;
      } else {
        console.log(`‚ùå Backend indispon√≠vel: ${url} (Status: ${response.status})`);
      }
    } catch (error) {
      console.log(`‚ùå Backend inacess√≠vel: ${url} (${error.message})`);
    }
  }
  
  console.log('‚ùå Nenhum backend dispon√≠vel encontrado');
  return null;
}

async function testarAutenticacao(backendUrl) {
  if (!backendUrl) {
    console.log('‚ùå Sem backend para testar autentica√ß√£o');
    return null;
  }
  
  try {
    // Fazer login com Supabase
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    
    const { data, error } = await supabase.auth.signInWithPassword({
      email: 'admin@teste.com',
      password: 'NovaSeinha123!'
    });
    
    if (error) {
      console.log('‚ùå Erro no login:', error.message);
      return null;
    }
    
    console.log('‚úÖ Login Supabase OK');
    console.log(`   User ID: ${data.user.id}`);
    console.log(`   Email: ${data.user.email}`);
    
    const token = data.session.access_token;
    
    // Testar token no backend
    const response = await fetch(`${backendUrl}/api/user/profile`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.ok) {
      const profile = await response.json();
      console.log('‚úÖ Token v√°lido no backend');
      console.log(`   Nome: ${profile.name}`);
      return token;
    } else {
      console.log('‚ùå Token inv√°lido no backend:', response.status);
      return null;
    }
    
  } catch (error) {
    console.log('‚ùå Erro na autentica√ß√£o:', error.message);
    return null;
  }
}

async function testarRotasCalendario(backendUrl, token) {
  if (!backendUrl || !token) {
    console.log('‚ùå Sem backend ou token para testar rotas');
    return;
  }
  
  const headers = {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };
  
  const rotasParaTestar = [
    { path: '/api/appointments', method: 'GET', nome: 'Listar agendamentos' },
    { path: '/api/contacts', method: 'GET', nome: 'Listar contatos' },
    { path: '/api/calendar/integrations', method: 'GET', nome: 'Integra√ß√µes calend√°rio' },
    { path: '/api/clinic/1/config', method: 'GET', nome: 'Configura√ß√£o cl√≠nica' },
    { path: '/api/calendar/config?clinic_id=1&user_id=1', method: 'GET', nome: 'Config calend√°rio' },
    { path: '/api/calendar/events?clinic_id=1&start_date=2024-01-01&end_date=2024-12-31', method: 'GET', nome: 'Eventos calend√°rio' }
  ];
  
  for (const rota of rotasParaTestar) {
    try {
      console.log(`üîç Testando: ${rota.nome} (${rota.method} ${rota.path})`);
      
      const response = await fetch(`${backendUrl}${rota.path}`, {
        method: rota.method,
        headers: headers,
        timeout: 10000
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ ${rota.nome}: OK`);
        
        if (Array.isArray(data)) {
          console.log(`   Registros: ${data.length}`);
        } else if (data.data && Array.isArray(data.data)) {
          console.log(`   Registros: ${data.data.length}`);
        } else {
          console.log(`   Resposta: ${typeof data}`);
        }
      } else {
        const errorText = await response.text();
        console.log(`‚ùå ${rota.nome}: ${response.status} - ${errorText}`);
      }
    } catch (error) {
      console.log(`‚ùå ${rota.nome}: Erro - ${error.message}`);
    }
  }
}

async function verificarDadosBanco() {
  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    
    // Verificar dados essenciais
    const consultas = [
      { tabela: 'users', descricao: 'Usu√°rios' },
      { tabela: 'clinics', descricao: 'Cl√≠nicas' },
      { tabela: 'contacts', descricao: 'Contatos' },
      { tabela: 'appointments', descricao: 'Agendamentos' },
      { tabela: 'calendar_integrations', descricao: 'Integra√ß√µes calend√°rio' }
    ];
    
    for (const consulta of consultas) {
      try {
        const { data, error, count } = await supabase
          .from(consulta.tabela)
          .select('*', { count: 'exact' })
          .limit(5);
        
        if (error) {
          console.log(`‚ùå ${consulta.descricao}: ${error.message}`);
        } else {
          console.log(`‚úÖ ${consulta.descricao}: ${count} registros`);
          if (data && data.length > 0) {
            console.log(`   Primeiro registro: ${JSON.stringify(data[0], null, 2).substring(0, 200)}...`);
          }
        }
      } catch (e) {
        console.log(`‚ùå ${consulta.descricao}: Erro de consulta`);
      }
    }
    
    // Verificar configura√ß√£o espec√≠fica da cl√≠nica
    const { data: clinicData, error: clinicError } = await supabase
      .from('clinics')
      .select('*')
      .eq('id', 1)
      .single();
    
    if (clinicError) {
      console.log('‚ùå Configura√ß√£o da cl√≠nica 1:', clinicError.message);
    } else {
      console.log('‚úÖ Configura√ß√£o da cl√≠nica 1:');
      console.log(`   Nome: ${clinicData.name}`);
      console.log(`   Hor√°rio: ${clinicData.work_start} - ${clinicData.work_end}`);
      console.log(`   Almo√ßo: ${clinicData.has_lunch_break ? `${clinicData.lunch_start} - ${clinicData.lunch_end}` : 'N√£o'}`);
    }
    
  } catch (error) {
    console.log('‚ùå Erro ao verificar dados:', error.message);
  }
}

async function testarConfigFrontend() {
  console.log('Testando configura√ß√£o do frontend...');
  
  for (const url of FRONTEND_URLS) {
    try {
      console.log(`üîç Testando: ${url}`);
      
      const response = await fetch(url, {
        method: 'GET',
        timeout: 5000
      });
      
      if (response.ok) {
        console.log(`‚úÖ Frontend acess√≠vel: ${url}`);
        
        // Verificar se h√° erros de console vis√≠veis
        const html = await response.text();
        if (html.includes('VITE_API_URL')) {
          console.log('   ‚ö†Ô∏è Vari√°vel VITE_API_URL exposta no HTML');
        }
        
      } else {
        console.log(`‚ùå Frontend indispon√≠vel: ${url} (Status: ${response.status})`);
      }
    } catch (error) {
      console.log(`‚ùå Frontend inacess√≠vel: ${url} (${error.message})`);
    }
  }
  
  // Verificar configura√ß√£o da API no frontend
  console.log('\nüìã Configura√ß√£o esperada do frontend:');
  console.log('   - Em desenvolvimento: proxy para localhost:3000 ou localhost:5000');
  console.log('   - Em produ√ß√£o: VITE_API_URL deve apontar para backend AWS');
  console.log('   - Fallback: http://operabase-backend-mvp-env-1.sa-east-1.elasticbeanstalk.com');
}

// Executar diagn√≥stico
diagnosticoCompleto().catch(console.error);

/**
 * üîç DIAGN√ìSTICO COMPLETO: Por que os dados n√£o aparecem no Vercel
 * An√°lise da arquitetura Frontend (Vercel) + Backend (AWS)
 */

console.log('üîç DIAGN√ìSTICO COMPLETO - Frontend Vercel + Backend AWS');
console.log('======================================================\n');

// ‚úÖ SOLU√á√ÉO 1 - VALIDADA
console.log('‚úÖ SOLU√á√ÉO 1 - CORS CONFIGURADO E TESTADO');
console.log('==========================================');
console.log('‚úÖ Status: IMPLEMENTADO E FUNCIONANDO');
console.log('‚úÖ Arquivo: server/simple-server.cjs');
console.log('‚úÖ Teste local: PASSOU - Headers CORS corretos');
console.log('‚úÖ Origens permitidas:');
console.log('   - https://operabase-frontend.vercel.app');
console.log('   - https://operabase-main.vercel.app');
console.log('   - https://operabase-main-git-main-caioapfelbaums-projects.vercel.app');
console.log('   - http://localhost:3000');
console.log('   - http://localhost:5173');
console.log('‚úÖ Headers configurados:');
console.log('   - Access-Control-Allow-Origin: [origin]');
console.log('   - Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
console.log('   - Access-Control-Allow-Headers: Content-Type, Authorization');
console.log('   - Access-Control-Allow-Credentials: true\n');

// üîç AN√ÅLISE DA ARQUITETURA ATUAL
console.log('üèóÔ∏è ARQUITETURA ATUAL IDENTIFICADA');
console.log('================================');
console.log('üì± Frontend: Vercel (operabase-main.vercel.app)');
console.log('üñ•Ô∏è  Backend: AWS Elastic Beanstalk (operabase-backend-mvp-env-1.sa-east-1.elasticbeanstalk.com)');
console.log('üóÑÔ∏è  Database: Supabase (lkwrevhxugaxfpwiktdy.supabase.co)');
console.log('üîë Auth: Supabase Auth + Session Management\n');

// üîç CONFIGURA√á√ÉO DO FRONTEND
console.log('üîç CONFIGURA√á√ÉO DO FRONTEND (src/lib/api.ts)');
console.log('============================================');
console.log('üìç Fun√ß√£o getApiBaseUrl():');
console.log('   1. VITE_API_URL (produ√ß√£o) - vari√°vel de ambiente');
console.log('   2. Proxy vazio (desenvolvimento)');
console.log('   3. Fallback AWS: operabase-backend-mvp-env-1.sa-east-1.elasticbeanstalk.com');
console.log('üìç Credenciais: credentials: "include" (cookies/session)');
console.log('üìç Headers de auth: Authorization: Bearer [token]\n');

// ‚ùå PROBLEMAS IDENTIFICADOS
console.log('‚ùå PROBLEMAS IDENTIFICADOS');
console.log('=========================');
console.log('1. üîó URL DO BACKEND AWS');
console.log('   ‚ùå Problema: URL hardcoded pode estar incorreta');
console.log('   ‚ùå Fallback: operabase-backend-mvp-env-1.sa-east-1.elasticbeanstalk.com');
console.log('   ‚ùå Verificar se esta URL est√° ativa e respondendo');
console.log('');
console.log('2. üîê VARI√ÅVEIS DE AMBIENTE NO VERCEL');
console.log('   ‚ùå Problema: VITE_API_URL pode n√£o estar configurada');
console.log('   ‚ùå Verificar no painel do Vercel se est√° definida');
console.log('   ‚ùå Valor esperado: URL do backend AWS');
console.log('');
console.log('3. üç™ AUTENTICA√á√ÉO E SESS√ÉO');
console.log('   ‚ùå Problema: Supabase Auth pode n√£o estar sincronizada');
console.log('   ‚ùå Frontend usa: Supabase Auth + Bearer tokens');
console.log('   ‚ùå Backend usa: Session cookies + passport.js');
console.log('   ‚ùå Conflito: Dois sistemas de auth diferentes');
console.log('');
console.log('4. üîí RLS (Row Level Security)');
console.log('   ‚ùå Problema: Pol√≠ticas RLS podem estar bloqueando');
console.log('   ‚ùå Chave ANON: Limitada por RLS');
console.log('   ‚ùå Verificar se usu√°rio est√° autenticado no contexto correto');
console.log('');
console.log('5. üåê CORS NO BACKEND AWS');
console.log('   ‚ùå Problema: Backend AWS pode n√£o ter CORS configurado');
console.log('   ‚ùå Solu√ß√£o 1: Aplicada apenas no simple-server.cjs');
console.log('   ‚ùå Falta: Configurar CORS no server/index.ts principal');
console.log('');

// üéØ PLANO DE A√á√ÉO
console.log('üéØ PLANO DE A√á√ÉO - PR√ìXIMOS PASSOS');
console.log('=================================');
console.log('');
console.log('üîß ETAPA 1: VERIFICAR CONECTIVIDADE');
console.log('   1. Testar se a URL do AWS est√° respondendo');
console.log('   2. Verificar se o backend est√° rodando');
console.log('   3. Testar endpoints b√°sicos (/health, /api/test)');
console.log('');
console.log('üîß ETAPA 2: CONFIGURAR VARI√ÅVEIS NO VERCEL');
console.log('   1. Definir VITE_API_URL no painel do Vercel');
console.log('   2. Valor: URL do backend AWS');
console.log('   3. Fazer novo deploy para aplicar');
console.log('');
console.log('üîß ETAPA 3: APLICAR CORS NO BACKEND PRINCIPAL');
console.log('   1. Adicionar CORS no server/index.ts');
console.log('   2. Incluir dom√≠nios do Vercel');
console.log('   3. Fazer deploy no AWS');
console.log('');
console.log('üîß ETAPA 4: SINCRONIZAR AUTENTICA√á√ÉO');
console.log('   1. Verificar se Supabase Auth est√° funcionando');
console.log('   2. Testar se tokens est√£o sendo enviados');
console.log('   3. Verificar se backend reconhece a autentica√ß√£o');
console.log('');
console.log('üîß ETAPA 5: TESTAR POL√çTICAS RLS');
console.log('   1. Verificar se usu√°rio tem acesso aos dados');
console.log('   2. Testar queries diretamente no Supabase');
console.log('   3. Ajustar pol√≠ticas se necess√°rio');
console.log('');

// üö® PRIORIDADE ALTA
console.log('üö® PRIORIDADE ALTA - A√á√ïES IMEDIATAS');
console.log('===================================');
console.log('1. üîç VERIFICAR URL DO BACKEND AWS');
console.log('   - Testar: curl https://operabase-backend-mvp-env-1.sa-east-1.elasticbeanstalk.com/health');
console.log('   - Se n√£o responder: Verificar se o backend est√° rodando no AWS');
console.log('');
console.log('2. ‚öôÔ∏è CONFIGURAR VITE_API_URL NO VERCEL');
console.log('   - Ir no painel do Vercel > Settings > Environment Variables');
console.log('   - Adicionar: VITE_API_URL = [URL_DO_BACKEND_AWS]');
console.log('   - Fazer redeploy');
console.log('');
console.log('3. üîß APLICAR CORS NO BACKEND PRINCIPAL');
console.log('   - Editar server/index.ts');
console.log('   - Adicionar configura√ß√£o CORS similar ao simple-server.cjs');
console.log('   - Deploy no AWS');
console.log('');

// üìä RESUMO EXECUTIVO
console.log('üìä RESUMO EXECUTIVO');
console.log('==================');
console.log('‚úÖ SOLU√á√ÉO 1 (CORS): IMPLEMENTADA E TESTADA');
console.log('‚ùå PROBLEMA PRINCIPAL: Conectividade Frontend ‚Üí Backend');
console.log('üéØ FOCO: Verificar URL do backend e vari√°veis de ambiente');
console.log('‚è∞ TEMPO ESTIMADO: 30-60 minutos para resolver');
console.log('üîÑ PR√ìXIMO PASSO: Aguardar aprova√ß√£o para implementar ETAPA 1');
console.log('');
console.log('üîç DIAGN√ìSTICO COMPLETO FINALIZADO');
console.log('=================================='); 
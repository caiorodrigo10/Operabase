name: Deploy Backend to AWS

on:
  push:
    branches: [main]
    paths: ['server/production-server.js', 'package.json', 'package-lock.json', '.github/workflows/deploy-aws.yml']

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Debug - Check if secrets are available
        run: |
          echo "Checking if AWS secrets are available..."
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "‚ùå AWS_ACCESS_KEY_ID is empty or not set"
          else
            echo "‚úÖ AWS_ACCESS_KEY_ID is set"
          fi
          
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "‚ùå AWS_SECRET_ACCESS_KEY is empty or not set"
          else
            echo "‚úÖ AWS_SECRET_ACCESS_KEY is set"
          fi
          
          if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
            echo "‚ùå SUPABASE_URL is empty or not set"
          else
            echo "‚úÖ SUPABASE_URL is set"
          fi
          
          if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
            echo "‚ùå SUPABASE_SERVICE_ROLE_KEY is empty or not set"
          else
            echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is set"
          fi
      
      - name: Install production dependencies
        run: |
          echo "üì¶ Installing production dependencies..."
          # Check if package-lock.json exists and is in sync
          if [ -f "package-lock.json" ]; then
            echo "üìÑ package-lock.json found, attempting npm ci..."
            npm ci --omit=dev --no-audit --no-fund || {
              echo "‚ö†Ô∏è npm ci failed, falling back to npm install..."
              rm -f package-lock.json
              npm install --omit=dev --no-audit --no-fund
            }
          else
            echo "üìÑ No package-lock.json found, using npm install..."
            npm install --omit=dev --no-audit --no-fund
          fi
      
      - name: Create deployment package
        run: |
          echo "üì¶ Creating deployment package..."
          # Create a clean directory for deployment
          mkdir -p deploy
          
          # Copy only necessary files for backend
          cp package.json deploy/
          cp -r server/ deploy/
          cp -r node_modules/ deploy/ 2>/dev/null || echo "‚ö†Ô∏è node_modules not found, will install on AWS"
          
          # Copy configuration files
          cp -r .ebextensions/ deploy/ 2>/dev/null || echo "‚ÑπÔ∏è No .ebextensions directory"
          
          # Create zip for deployment
          cd deploy
          zip -r ../deployment.zip . -x "*.git*" "*.DS_Store*" "node_modules/.cache/*"
          cd ..
          
          echo "‚úÖ Deployment package created: deployment.zip"
          ls -la deployment.zip
      
      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: operabase-backend
          environment_name: Operabase-backend-env
          region: us-east-1
          version_label: ${{ github.sha }}
          deployment_package: deployment.zip
          wait_for_environment_recovery: 300
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      
      - name: Verify deployment
        run: |
          echo "üîç Deployment completed!"
          echo "üéØ Version: ${{ github.sha }}"
          echo "üìç Environment: Operabase-backend-env"
          echo "ÔøΩÔøΩ Region: us-east-1" 
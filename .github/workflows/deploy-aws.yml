name: Deploy Backend to AWS

on:
  push:
    branches: [main]
    paths: ['server/production-server.js', 'package.json', 'package-lock.json']

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Debug - Check if secrets are available
        run: |
          echo "Checking if AWS secrets are available..."
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "‚ùå AWS_ACCESS_KEY_ID is empty or not set"
          else
            echo "‚úÖ AWS_ACCESS_KEY_ID is set"
          fi
          
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "‚ùå AWS_SECRET_ACCESS_KEY is empty or not set"
          else
            echo "‚úÖ AWS_SECRET_ACCESS_KEY is set"
          fi
          
          if [ -z "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
            echo "‚ùå SUPABASE_SERVICE_ROLE_KEY is empty or not set"
          else
            echo "‚úÖ SUPABASE_SERVICE_ROLE_KEY is set"
          fi
      
      - name: Install dependencies
        run: |
          echo "üì¶ Installing production dependencies..."
          npm ci --only=production --no-audit --no-fund
      
      - name: Test server locally
        run: |
          echo "üß™ Testing server startup..."
          timeout 10s node server/production-server.js || true
          echo "‚úÖ Server test completed"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1
      
      - name: Create deployment package
        run: |
          echo "üì¶ Creating deployment package..."
          
          # Create deployment directory
          mkdir -p deploy
          
          # Copy essential files
          cp package.json deploy/
          cp package-lock.json deploy/
          cp server/production-server.js deploy/
          
          # Create simple .env file
          echo "NODE_ENV=production" > deploy/.env
          echo "PORT=8080" >> deploy/.env
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> deploy/.env
          
          # Create zip file
          cd deploy
          zip -r ../operabase-backend.zip .
          cd ..
          
          echo "‚úÖ Deployment package created"
          ls -la operabase-backend.zip
      
      - name: Deploy to AWS Elastic Beanstalk
        run: |
          echo "üöÄ Deploying to AWS Elastic Beanstalk..."
          
          # Install AWS CLI
          pip install awsebcli
          
          # Create application version
          VERSION_LABEL="production-$(date +%Y%m%d-%H%M%S)"
          
          # Get or create the default S3 bucket for this region
          BUCKET_NAME=$(aws elasticbeanstalk describe-application-versions \
            --application-name operabase-backend-mvp \
            --max-records 1 \
            --query 'ApplicationVersions[0].SourceBundle.S3Bucket' \
            --output text 2>/dev/null || echo "")
          
          if [ "$BUCKET_NAME" = "None" ] || [ -z "$BUCKET_NAME" ]; then
            # Use the default EB bucket pattern
            BUCKET_NAME="elasticbeanstalk-sa-east-1-$(aws sts get-caller-identity --query Account --output text)"
            echo "Using default bucket: $BUCKET_NAME"
          else
            echo "Using existing bucket: $BUCKET_NAME"
          fi
          
          # Upload to S3
          aws s3 cp operabase-backend.zip s3://$BUCKET_NAME/operabase-backend/$VERSION_LABEL.zip
          
          # Create application version
          aws elasticbeanstalk create-application-version \
            --application-name operabase-backend-mvp \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket=$BUCKET_NAME,S3Key=operabase-backend/$VERSION_LABEL.zip
          
          # Deploy to environment
          aws elasticbeanstalk update-environment \
            --environment-name operabase-backend-mvp-env-1 \
            --version-label $VERSION_LABEL
          
          echo "‚úÖ Deployment initiated with version: $VERSION_LABEL"
      
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          
          # Wait for deployment to finish (max 10 minutes)
          timeout 600s bash -c 'while true; do
            STATUS=$(aws elasticbeanstalk describe-environments \
              --environment-names operabase-backend-mvp-env-1 \
              --query "Environments[0].Status" \
              --output text)
            
            echo "Current status: $STATUS"
            
            if [ "$STATUS" = "Ready" ]; then
              echo "‚úÖ Deployment completed successfully!"
              break
            elif [ "$STATUS" = "Terminated" ]; then
              echo "‚ùå Deployment failed - environment terminated"
              exit 1
            fi
            
            sleep 30
          done'
      
      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          
          # Get environment URL
          URL=$(aws elasticbeanstalk describe-environments \
            --environment-names operabase-backend-mvp-env-1 \
            --query "Environments[0].CNAME" \
            --output text)
          
          echo "Environment URL: http://$URL"
          
          # Test health endpoint
          curl -f "http://$URL/health" || echo "Health check failed"
          
          echo "‚úÖ Deployment verification completed" 